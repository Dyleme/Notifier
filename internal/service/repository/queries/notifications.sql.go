// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: notifications.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addNotification = `-- name: AddNotification :one
INSERT INTO notifications (
    user_id,
    text,
    event_id,
    event_type,
    send_time
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING id, created_at, user_id, text, description, event_id, event_type, send_time, sended, done, notification_params
`

type AddNotificationParams struct {
	UserID    int32              `db:"user_id"`
	Text      string             `db:"text"`
	EventID   int32              `db:"event_id"`
	EventType EventType          `db:"event_type"`
	SendTime  pgtype.Timestamptz `db:"send_time"`
}

func (q *Queries) AddNotification(ctx context.Context, db DBTX, arg AddNotificationParams) (Notification, error) {
	row := db.QueryRow(ctx, addNotification,
		arg.UserID,
		arg.Text,
		arg.EventID,
		arg.EventType,
		arg.SendTime,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.Text,
		&i.Description,
		&i.EventID,
		&i.EventType,
		&i.SendTime,
		&i.Sended,
		&i.Done,
		&i.NotificationParams,
	)
	return i, err
}

const deleteNotification = `-- name: DeleteNotification :many
DELETE FROM notifications
WHERE id = $1
RETURNING id, created_at, user_id, text, description, event_id, event_type, send_time, sended, done, notification_params
`

func (q *Queries) DeleteNotification(ctx context.Context, db DBTX, id int32) ([]Notification, error) {
	rows, err := db.Query(ctx, deleteNotification, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.Text,
			&i.Description,
			&i.EventID,
			&i.EventType,
			&i.SendTime,
			&i.Sended,
			&i.Done,
			&i.NotificationParams,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestNotification = `-- name: GetLatestNotification :one
SELECT id, created_at, user_id, text, description, event_id, event_type, send_time, sended, done, notification_params FROM notifications
WHERE event_id = $1
ORDER BY send_time DESC
LIMIT 1
`

func (q *Queries) GetLatestNotification(ctx context.Context, db DBTX, eventID int32) (Notification, error) {
	row := db.QueryRow(ctx, getLatestNotification, eventID)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.Text,
		&i.Description,
		&i.EventID,
		&i.EventType,
		&i.SendTime,
		&i.Sended,
		&i.Done,
		&i.NotificationParams,
	)
	return i, err
}

const getNearestNotification = `-- name: GetNearestNotification :one
SELECT id, created_at, user_id, text, description, event_id, event_type, send_time, sended, done, notification_params FROM notifications
WHERE sended = FALSE
  AND send_time <= $1
ORDER BY send_time ASC
LIMIT 1
`

func (q *Queries) GetNearestNotification(ctx context.Context, db DBTX, till pgtype.Timestamptz) (Notification, error) {
	row := db.QueryRow(ctx, getNearestNotification, till)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.Text,
		&i.Description,
		&i.EventID,
		&i.EventType,
		&i.SendTime,
		&i.Sended,
		&i.Done,
		&i.NotificationParams,
	)
	return i, err
}

const getNotification = `-- name: GetNotification :one
SELECT id, created_at, user_id, text, description, event_id, event_type, send_time, sended, done, notification_params FROM notifications
WHERE id = $1
`

func (q *Queries) GetNotification(ctx context.Context, db DBTX, id int32) (Notification, error) {
	row := db.QueryRow(ctx, getNotification, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.Text,
		&i.Description,
		&i.EventID,
		&i.EventType,
		&i.SendTime,
		&i.Sended,
		&i.Done,
		&i.NotificationParams,
	)
	return i, err
}

const listNotSendedNotifications = `-- name: ListNotSendedNotifications :many
SELECT id, created_at, user_id, text, description, event_id, event_type, send_time, sended, done, notification_params FROM notifications
WHERE sended = FALSE
  AND send_time <= $1
`

func (q *Queries) ListNotSendedNotifications(ctx context.Context, db DBTX, till pgtype.Timestamptz) ([]Notification, error) {
	rows, err := db.Query(ctx, listNotSendedNotifications, till)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.Text,
			&i.Description,
			&i.EventID,
			&i.EventType,
			&i.SendTime,
			&i.Sended,
			&i.Done,
			&i.NotificationParams,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserNotifications = `-- name: ListUserNotifications :many
SELECT id, created_at, user_id, text, description, event_id, event_type, send_time, sended, done, notification_params FROM notifications
WHERE user_id = $1
  AND send_time BETWEEN $2 AND $3
ORDER BY send_time DESC
LIMIT $5 OFFSET $4
`

type ListUserNotificationsParams struct {
	UserID   int32              `db:"user_id"`
	FromTime pgtype.Timestamptz `db:"from_time"`
	ToTime   pgtype.Timestamptz `db:"to_time"`
	Off      int32              `db:"off"`
	Lim      int32              `db:"lim"`
}

func (q *Queries) ListUserNotifications(ctx context.Context, db DBTX, arg ListUserNotificationsParams) ([]Notification, error) {
	rows, err := db.Query(ctx, listUserNotifications,
		arg.UserID,
		arg.FromTime,
		arg.ToTime,
		arg.Off,
		arg.Lim,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.Text,
			&i.Description,
			&i.EventID,
			&i.EventType,
			&i.SendTime,
			&i.Sended,
			&i.Done,
			&i.NotificationParams,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markSendedNotifiatoins = `-- name: MarkSendedNotifiatoins :exec
UPDATE notifications
SET sended = TRUE
WHERE id = ANY($1)
`

func (q *Queries) MarkSendedNotifiatoins(ctx context.Context, db DBTX, ids []int32) error {
	_, err := db.Exec(ctx, markSendedNotifiatoins, ids)
	return err
}

const updateNotification = `-- name: UpdateNotification :one
UPDATE notifications
SET text = $1,
    send_time = $2,
    sended = $3,
    done = $4
WHERE id = $5
RETURNING id, created_at, user_id, text, description, event_id, event_type, send_time, sended, done, notification_params
`

type UpdateNotificationParams struct {
	Text     string             `db:"text"`
	SendTime pgtype.Timestamptz `db:"send_time"`
	Sended   bool               `db:"sended"`
	Done     bool               `db:"done"`
	ID       int32              `db:"id"`
}

func (q *Queries) UpdateNotification(ctx context.Context, db DBTX, arg UpdateNotificationParams) (Notification, error) {
	row := db.QueryRow(ctx, updateNotification,
		arg.Text,
		arg.SendTime,
		arg.Sended,
		arg.Done,
		arg.ID,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.Text,
		&i.Description,
		&i.EventID,
		&i.EventType,
		&i.SendTime,
		&i.Sended,
		&i.Done,
		&i.NotificationParams,
	)
	return i, err
}
