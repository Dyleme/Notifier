// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: default_user_notifications.sql

package queries

import (
	"context"

	domains "github.com/Dyleme/Notifier/internal/timetable-service/domains"
)

const getDefaultUserNotificationsParams = `-- name: GetDefaultUserNotificationsParams :one
SELECT user_id, created_at, params
FROM default_user_notification_params
WHERE user_id = $1
`

func (q *Queries) GetDefaultUserNotificationsParams(ctx context.Context, userID int32) (DefaultUserNotificationParam, error) {
	row := q.db.QueryRow(ctx, getDefaultUserNotificationsParams, userID)
	var i DefaultUserNotificationParam
	err := row.Scan(&i.UserID, &i.CreatedAt, &i.Params)
	return i, err
}

const setDefaultUserNotificationParams = `-- name: SetDefaultUserNotificationParams :one
INSERT INTO default_user_notification_params (user_id,
                                              params
)
VALUES ($1,
        $2
       )
ON CONFLICT (user_id)
    DO UPDATE SET params          = $2
RETURNING user_id, created_at, params
`

type SetDefaultUserNotificationParamsParams struct {
	UserID int32
	Params domains.NotificationParams
}

func (q *Queries) SetDefaultUserNotificationParams(ctx context.Context, arg SetDefaultUserNotificationParamsParams) (DefaultUserNotificationParam, error) {
	row := q.db.QueryRow(ctx, setDefaultUserNotificationParams, arg.UserID, arg.Params)
	var i DefaultUserNotificationParam
	err := row.Scan(&i.UserID, &i.CreatedAt, &i.Params)
	return i, err
}
