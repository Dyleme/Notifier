// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package queries

import (
	"database/sql/driver"
	"fmt"

	domains "github.com/Dyleme/Notifier/internal/domains"
	"github.com/jackc/pgx/v5/pgtype"
)

type EventType string

const (
	EventTypePeriodicEvent EventType = "periodic_event"
	EventTypeBasicEvent    EventType = "basic_event"
)

func (e *EventType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventType(s)
	case string:
		*e = EventType(s)
	default:
		return fmt.Errorf("unsupported scan type for EventType: %T", src)
	}
	return nil
}

type NullEventType struct {
	EventType EventType
	Valid     bool // Valid is true if EventType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventType) Scan(value interface{}) error {
	if value == nil {
		ns.EventType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EventType), nil
}

type BasicEvent struct {
	ID                 int32                       `db:"id"`
	CreatedAt          pgtype.Timestamp            `db:"created_at"`
	Text               string                      `db:"text"`
	Description        pgtype.Text                 `db:"description"`
	UserID             int32                       `db:"user_id"`
	Start              pgtype.Timestamptz          `db:"start"`
	NotificationParams *domains.NotificationParams `db:"notification_params"`
}

type DefaultUserNotificationParam struct {
	UserID    int32                      `db:"user_id"`
	CreatedAt pgtype.Timestamp           `db:"created_at"`
	Params    domains.NotificationParams `db:"params"`
}

type Notification struct {
	ID                 int32                       `db:"id"`
	CreatedAt          pgtype.Timestamp            `db:"created_at"`
	UserID             int32                       `db:"user_id"`
	Text               string                      `db:"text"`
	Description        pgtype.Text                 `db:"description"`
	EventID            int32                       `db:"event_id"`
	EventType          EventType                   `db:"event_type"`
	SendTime           pgtype.Timestamptz          `db:"send_time"`
	Sended             bool                        `db:"sended"`
	Done               bool                        `db:"done"`
	NotificationParams *domains.NotificationParams `db:"notification_params"`
}

type PeriodicEvent struct {
	ID                 int32                       `db:"id"`
	CreatedAt          pgtype.Timestamp            `db:"created_at"`
	Text               string                      `db:"text"`
	Description        pgtype.Text                 `db:"description"`
	UserID             int32                       `db:"user_id"`
	Start              pgtype.Timestamptz          `db:"start"`
	SmallestPeriod     int32                       `db:"smallest_period"`
	BiggestPeriod      int32                       `db:"biggest_period"`
	NotificationParams *domains.NotificationParams `db:"notification_params"`
}

type Task struct {
	ID        int32            `db:"id"`
	CreatedAt pgtype.Timestamp `db:"created_at"`
	Message   string           `db:"message"`
	UserID    int32            `db:"user_id"`
	Periodic  bool             `db:"periodic"`
	Archived  bool             `db:"archived"`
}

type TgImage struct {
	ID       int32  `db:"id"`
	Filename string `db:"filename"`
	TgFileID string `db:"tg_file_id"`
}

type User struct {
	ID             int32       `db:"id"`
	Email          pgtype.Text `db:"email"`
	PasswordHash   pgtype.Text `db:"password_hash"`
	TgID           pgtype.Int4 `db:"tg_id"`
	TimezoneOffset int32       `db:"timezone_offset"`
	TimezoneDst    bool        `db:"timezone_dst"`
}
