// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: tasks.sql

package queries

import (
	"context"
)

const addTask = `-- name: AddTask :one
INSERT INTO tasks (user_id,
                   message,
                   periodic )
VALUES ($1,
        $2,
        $3)
RETURNING id, created_at, message, user_id, periodic, archived
`

type AddTaskParams struct {
	UserID   int32
	Message  string
	Periodic bool
}

func (q *Queries) AddTask(ctx context.Context, arg AddTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, addTask, arg.UserID, arg.Message, arg.Periodic)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Message,
		&i.UserID,
		&i.Periodic,
		&i.Archived,
	)
	return i, err
}

const countListTasks = `-- name: CountListTasks :one
SELECT count(*)
FROM tasks
WHERE user_id = $1
  AND archived = FALSE
`

func (q *Queries) CountListTasks(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countListTasks, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteTask = `-- name: DeleteTask :execrows
DELETE
FROM tasks
WHERE id = $1
  AND user_id = $2
`

type DeleteTaskParams struct {
	ID     int32
	UserID int32
}

func (q *Queries) DeleteTask(ctx context.Context, arg DeleteTaskParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteTask, arg.ID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getTask = `-- name: GetTask :one
SELECT id, created_at, message, user_id, periodic, archived
FROM tasks
WHERE id = $1
  AND user_id = $2
`

type GetTaskParams struct {
	ID     int32
	UserID int32
}

func (q *Queries) GetTask(ctx context.Context, arg GetTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, getTask, arg.ID, arg.UserID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Message,
		&i.UserID,
		&i.Periodic,
		&i.Archived,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, created_at, message, user_id, periodic, archived
FROM tasks
WHERE user_id = $1
  AND archived = FALSE
ORDER BY id DESC
LIMIT $3
OFFSET $2
`

type ListTasksParams struct {
	UserID int32
	Off    int32
	Lim    int32
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasks, arg.UserID, arg.Off, arg.Lim)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Message,
			&i.UserID,
			&i.Periodic,
			&i.Archived,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks
SET message       = $1,
    periodic      = $2,
    archived      = $3
WHERE id = $4
  AND user_id = $5
`

type UpdateTaskParams struct {
	Message  string
	Periodic bool
	Archived bool
	ID       int32
	UserID   int32
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.Exec(ctx, updateTask,
		arg.Message,
		arg.Periodic,
		arg.Archived,
		arg.ID,
		arg.UserID,
	)
	return err
}
