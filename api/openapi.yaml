openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080
tags:
  - name: Authentication
    description: Authentication
  - name: Tasks
    description: Create and manafe your tasks
  - name: EventParams
    description: Manage Event params
paths:
  /auth/register:
    post:
      summary: Register new user
      tags:
        - Authentication
      security:
        - apiKeyAuth: []
      description: Register new user
      operationId: registration
      requestBody:
        description: Registration body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationBody'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
        '405':
          description: Invalid input
  /auth/login:
    post:
      summary: Login user
      tags:
        - Authentication
      security:
        - apiKeyAuth: []
      description: Login user and get token
      operationId: login
      requestBody:
        description: Login body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
        '405':
          description: Invalid input

  /task:
    get:
      summary: List tasks
      tags:
        - Tasks
      security:
        - bearerAuth: []
      description: List tasks
      operationId: listTasks
      parameters:
        - in: query
          name: from
          schema:
            type: string
            format: date-time
        - in: query
          name: to
          schema:
            type: string
            format: date-time
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '405':
          description: Invalid input
    post:
      summary: Create new task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      description: Create new task
      operationId: createTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskReqBody'
        required: true
      responses:
        '201':
          description: Successfull creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '405':
          description: Invalid input

  /task/{taskID}:
    get:
      summary: Get task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      description: Get task
      operationId: getTask
      parameters:
        - in: path
          name: taskID
          schema:
            type: integer
          required: true
          description: task task id
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '405':
          description: Invalid input

    put:
      summary: Update task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      description: Update task
      operationId: updateTask
      parameters:
        - in: path
          name: taskID
          schema:
            type: integer
          required: true
          description: Task task id
      requestBody:
        description: Update Task task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskReqBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '405':
          description: Invalid input

  /task/{taskID}/event-params:
    get:
      summary: Get task event params
      tags:
        - Tasks
        - EventParams
      security:
        - bearerAuth: []
      description: Get task event params
      operationId: getTaskEventParams
      parameters:
        - in: path
          name: taskID
          schema:
            type: integer
          required: true
          description: Task id
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventParams'
        '405':
          description: Invalid input

    put:
      summary: Set Task event params
      tags:
        - Tasks
        - EventParams
      security:
        - bearerAuth: []
      description: Set task event params
      operationId: setTaskEventParams
      parameters:
        - in: path
          name: taskID
          schema:
            type: integer
          required: true
          description: Task task id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventParams'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventParams'
        '405':
          description: Invalid input

  /event-params:
    get:
      summary: Set default event params
      tags:
        - EventParams
      security:
        - bearerAuth: []
      description: get default event params
      operationId: getDefaultEventParams
      responses:
        '200':
          description: Successfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventParams'
        '405':
          description: Invalid input

    put:
      summary: Set default event params
      tags:
        - EventParams
      security:
        - bearerAuth: []
      description: set default event params
      operationId: setDefaultEventParams
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventParams'
        required: true
      responses:
        '201':
          description: Successfull creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventParams'
        '405':
          description: Invalid input


components:

# define reusable parameters:
  parameters:
    limitParam:
      name: limit
      in: query
      description: Limits the number of returned results
      required: false
      schema:
        type: integer
        format: int32
    offsetParam:
      name: offset
      in: query
      description: Offset from which start returned results
      required: false
      schema:
        type: integer
        format: int32
  schemas:
    RegistrationBody:
      required:
        - email
        - nickname
        - password
      type: object
      properties:
        email:
          type: string
          example: email@example.com
          format: email
        nickname:
          type: string
          example: Nagibator228
        password:
          type: string
          description: Password
          format: password

    LoginBody:
      required:
        - loginString
        - password
      type: object
      properties:
        loginString:
          type: string
          description: nickname or email of user
          example: Nagibator228
        password:
          type: string
          description: Password
          format: password

    Tokens:
      type: object
      properties:
        accessToken:
          $ref: '#/components/schemas/Token'
        refreshToken:
          $ref: '#/components/schemas/Token'

    Token:
      type: string
      description: Jwt token
#      format: byte
      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dnZWRJbkFzIjoiYWRtaW4iLCJpYXQiOjE0MjI3Nzk2Mzh9.gzSraSYS8EXBxLN_oWnFSRgCzcmJmMjLiuyu5CSpyHI
#      required: true

    CreateTaskReqBody:
      type: object
      properties:
        message:
          type: string
          example: Message
        start:
          type: string
          format: date-time
        description:
          type: string
          example: Description
      required:
        - message
        - requiredTime
        - periodic
        - start

    SetTaskReqBody:
      required:
        - start
        - done
      type: object
      properties:
        description:
          type: string
          example: Task description
        start:
          type: string
          format: date-time


    UpdateTaskReqBody:
      required:
        - finish
        - start
        - done
      type: object
      properties:
        description:
          type: string
          example: Task description
        start:
          type: string
          format: date-time
        done:
          type: boolean

    Task:
      required:
        - id
        - text
        - start
        - done
      type: object
      properties:
        id:
          type: integer
          example: 12542
        text:
          type: string
          example: Task text
        description:
          type: string
          example: Task description
        start:
          type: string
          format: date-time
        done:
          type: boolean

    EventParams:
      type: object
      required:
        - period
        - info
      properties:
        period:
          type: integer
          description: Required time for task in minutes
          minimum: 1
          example: 5
        delayedTill:
          type: string
          format: date-time
        info:
          $ref: '#/components/schemas/EventInfo'


    EventInfo:
      type: object
      properties:
        cmd:
          type: boolean
        telegram:
          type: integer
        webhook:
          type: string


  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:
      type: apiKey
      name: api_key
      in: header

