// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUser = `-- name: AddUser :one
INSERT INTO users (
                   email,
                   password_hash,
                   tg_id
                   )
VALUES (
        $1,
        $2,
        $3
       )
RETURNING id, email, password_hash, tg_id, timezone_offset, timezone_dst
`

type AddUserParams struct {
	Email        pgtype.Text `db:"email"`
	PasswordHash pgtype.Text `db:"password_hash"`
	TgID         pgtype.Int4 `db:"tg_id"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (User, error) {
	row := q.db.QueryRow(ctx, addUser, arg.Email, arg.PasswordHash, arg.TgID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.TgID,
		&i.TimezoneOffset,
		&i.TimezoneDst,
	)
	return i, err
}

const findUser = `-- name: FindUser :one
SELECT id, email, password_hash, tg_id, timezone_offset, timezone_dst
FROM users
WHERE email = $1
   OR tg_id = $2
`

type FindUserParams struct {
	Email pgtype.Text `db:"email"`
	TgID  pgtype.Int4 `db:"tg_id"`
}

func (q *Queries) FindUser(ctx context.Context, arg FindUserParams) (User, error) {
	row := q.db.QueryRow(ctx, findUser, arg.Email, arg.TgID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.TgID,
		&i.TimezoneOffset,
		&i.TimezoneDst,
	)
	return i, err
}

const getLoginParameters = `-- name: GetLoginParameters :one
SELECT id,
       password_hash
FROM users
WHERE email = $1
`

type GetLoginParametersRow struct {
	ID           int32       `db:"id"`
	PasswordHash pgtype.Text `db:"password_hash"`
}

func (q *Queries) GetLoginParameters(ctx context.Context, email pgtype.Text) (GetLoginParametersRow, error) {
	row := q.db.QueryRow(ctx, getLoginParameters, email)
	var i GetLoginParametersRow
	err := row.Scan(&i.ID, &i.PasswordHash)
	return i, err
}

const updateTime = `-- name: UpdateTime :exec
UPDATE users
SET timezone_offset = $1,
    timezone_dst = $2
WHERE id = $3
`

type UpdateTimeParams struct {
	TimezoneOffset int32 `db:"timezone_offset"`
	IsDst          bool  `db:"is_dst"`
	ID             int32 `db:"id"`
}

func (q *Queries) UpdateTime(ctx context.Context, arg UpdateTimeParams) error {
	_, err := q.db.Exec(ctx, updateTime, arg.TimezoneOffset, arg.IsDst, arg.ID)
	return err
}
