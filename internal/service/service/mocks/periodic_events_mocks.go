// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Dyleme/Notifier/internal/service/service (interfaces: PeriodicEventsRepository)
//
// Generated by this command:
//
//	mockgen -destination=mocks/periodic_events_mocks.go -package=mocks . PeriodicEventsRepository
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/Dyleme/Notifier/internal/domains"
	gomock "go.uber.org/mock/gomock"
)

// MockPeriodicEventsRepository is a mock of PeriodicEventsRepository interface.
type MockPeriodicEventsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPeriodicEventsRepositoryMockRecorder
}

// MockPeriodicEventsRepositoryMockRecorder is the mock recorder for MockPeriodicEventsRepository.
type MockPeriodicEventsRepositoryMockRecorder struct {
	mock *MockPeriodicEventsRepository
}

// NewMockPeriodicEventsRepository creates a new mock instance.
func NewMockPeriodicEventsRepository(ctrl *gomock.Controller) *MockPeriodicEventsRepository {
	mock := &MockPeriodicEventsRepository{ctrl: ctrl}
	mock.recorder = &MockPeriodicEventsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeriodicEventsRepository) EXPECT() *MockPeriodicEventsRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPeriodicEventsRepository) Add(arg0 context.Context, arg1 domain.PeriodicEvent) (domain.PeriodicEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(domain.PeriodicEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockPeriodicEventsRepositoryMockRecorder) Add(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPeriodicEventsRepository)(nil).Add), arg0, arg1)
}

// AddNotification mocks base method.
func (m *MockPeriodicEventsRepository) AddNotification(arg0 context.Context, arg1 domain.PeriodicEventNotification) (domain.PeriodicEventNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNotification", arg0, arg1)
	ret0, _ := ret[0].(domain.PeriodicEventNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNotification indicates an expected call of AddNotification.
func (mr *MockPeriodicEventsRepositoryMockRecorder) AddNotification(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNotification", reflect.TypeOf((*MockPeriodicEventsRepository)(nil).AddNotification), arg0, arg1)
}

// Delete mocks base method.
func (m *MockPeriodicEventsRepository) Delete(arg0 context.Context, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPeriodicEventsRepositoryMockRecorder) Delete(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPeriodicEventsRepository)(nil).Delete), arg0, arg1, arg2)
}

// DeleteNotification mocks base method.
func (m *MockPeriodicEventsRepository) DeleteNotification(arg0 context.Context, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotification", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNotification indicates an expected call of DeleteNotification.
func (mr *MockPeriodicEventsRepositoryMockRecorder) DeleteNotification(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotification", reflect.TypeOf((*MockPeriodicEventsRepository)(nil).DeleteNotification), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockPeriodicEventsRepository) Get(arg0 context.Context, arg1, arg2 int) (domain.PeriodicEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.PeriodicEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPeriodicEventsRepositoryMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPeriodicEventsRepository)(nil).Get), arg0, arg1, arg2)
}

// GetCurrentNotification mocks base method.
func (m *MockPeriodicEventsRepository) GetCurrentNotification(arg0 context.Context, arg1 int) (domain.PeriodicEventNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentNotification", arg0, arg1)
	ret0, _ := ret[0].(domain.PeriodicEventNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentNotification indicates an expected call of GetCurrentNotification.
func (mr *MockPeriodicEventsRepositoryMockRecorder) GetCurrentNotification(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentNotification", reflect.TypeOf((*MockPeriodicEventsRepository)(nil).GetCurrentNotification), arg0, arg1)
}

// GetNearestNotificationSendTime mocks base method.
func (m *MockPeriodicEventsRepository) GetNearestNotificationSendTime(arg0 context.Context) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNearestNotificationSendTime", arg0)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNearestNotificationSendTime indicates an expected call of GetNearestNotificationSendTime.
func (mr *MockPeriodicEventsRepositoryMockRecorder) GetNearestNotificationSendTime(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNearestNotificationSendTime", reflect.TypeOf((*MockPeriodicEventsRepository)(nil).GetNearestNotificationSendTime), arg0)
}

// ListNotificationsAtSendTime mocks base method.
func (m *MockPeriodicEventsRepository) ListNotificationsAtSendTime(arg0 context.Context, arg1 time.Time) ([]domain.PeriodicEventWithNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotificationsAtSendTime", arg0, arg1)
	ret0, _ := ret[0].([]domain.PeriodicEventWithNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotificationsAtSendTime indicates an expected call of ListNotificationsAtSendTime.
func (mr *MockPeriodicEventsRepositoryMockRecorder) ListNotificationsAtSendTime(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotificationsAtSendTime", reflect.TypeOf((*MockPeriodicEventsRepository)(nil).ListNotificationsAtSendTime), arg0, arg1)
}

// Update mocks base method.
func (m *MockPeriodicEventsRepository) Update(arg0 context.Context, arg1 domain.PeriodicEvent) (domain.PeriodicEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(domain.PeriodicEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPeriodicEventsRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPeriodicEventsRepository)(nil).Update), arg0, arg1)
}

// UpdateNotification mocks base method.
func (m *MockPeriodicEventsRepository) UpdateNotification(arg0 context.Context, arg1 domain.PeriodicEventNotification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotification", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotification indicates an expected call of UpdateNotification.
func (mr *MockPeriodicEventsRepositoryMockRecorder) UpdateNotification(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotification", reflect.TypeOf((*MockPeriodicEventsRepository)(nil).UpdateNotification), arg0, arg1)
}
