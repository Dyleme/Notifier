// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Dyleme/Notifier/internal/service/service (interfaces: PeriodicEventsRepository)
//
// Generated by this command:
//
//	mockgen -destination=mocks/periodic_events_mocks.go -package=mocks . PeriodicEventsRepository
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domains "github.com/Dyleme/Notifier/internal/domains"
	service "github.com/Dyleme/Notifier/internal/service/service"
	gomock "go.uber.org/mock/gomock"
)

// MockPeriodicEventsRepository is a mock of PeriodicEventsRepository interface.
type MockPeriodicEventsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPeriodicEventsRepositoryMockRecorder
}

// MockPeriodicEventsRepositoryMockRecorder is the mock recorder for MockPeriodicEventsRepository.
type MockPeriodicEventsRepositoryMockRecorder struct {
	mock *MockPeriodicEventsRepository
}

// NewMockPeriodicEventsRepository creates a new mock instance.
func NewMockPeriodicEventsRepository(ctrl *gomock.Controller) *MockPeriodicEventsRepository {
	mock := &MockPeriodicEventsRepository{ctrl: ctrl}
	mock.recorder = &MockPeriodicEventsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeriodicEventsRepository) EXPECT() *MockPeriodicEventsRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPeriodicEventsRepository) Add(arg0 context.Context, arg1 domains.PeriodicEvent, arg2 domains.PeriodicEventNotification) (domains.PeriodicEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1, arg2)
	ret0, _ := ret[0].(domains.PeriodicEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockPeriodicEventsRepositoryMockRecorder) Add(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPeriodicEventsRepository)(nil).Add), arg0, arg1, arg2)
}

// AddNotification mocks base method.
func (m *MockPeriodicEventsRepository) AddNotification(arg0 context.Context, arg1 domains.PeriodicEventNotification) (domains.PeriodicEventNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNotification", arg0, arg1)
	ret0, _ := ret[0].(domains.PeriodicEventNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNotification indicates an expected call of AddNotification.
func (mr *MockPeriodicEventsRepositoryMockRecorder) AddNotification(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNotification", reflect.TypeOf((*MockPeriodicEventsRepository)(nil).AddNotification), arg0, arg1)
}

// Delete mocks base method.
func (m *MockPeriodicEventsRepository) Delete(arg0 context.Context, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPeriodicEventsRepositoryMockRecorder) Delete(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPeriodicEventsRepository)(nil).Delete), arg0, arg1, arg2)
}

// DeleteNotification mocks base method.
func (m *MockPeriodicEventsRepository) DeleteNotification(arg0 context.Context, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotification", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNotification indicates an expected call of DeleteNotification.
func (mr *MockPeriodicEventsRepositoryMockRecorder) DeleteNotification(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotification", reflect.TypeOf((*MockPeriodicEventsRepository)(nil).DeleteNotification), arg0, arg1, arg2)
}

// DeleteNotifications mocks base method.
func (m *MockPeriodicEventsRepository) DeleteNotifications(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotifications", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNotifications indicates an expected call of DeleteNotifications.
func (mr *MockPeriodicEventsRepositoryMockRecorder) DeleteNotifications(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotifications", reflect.TypeOf((*MockPeriodicEventsRepository)(nil).DeleteNotifications), arg0, arg1)
}

// Get mocks base method.
func (m *MockPeriodicEventsRepository) Get(arg0 context.Context, arg1, arg2 int) (domains.PeriodicEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(domains.PeriodicEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPeriodicEventsRepositoryMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPeriodicEventsRepository)(nil).Get), arg0, arg1, arg2)
}

// GetNearestNotificationSendTime mocks base method.
func (m *MockPeriodicEventsRepository) GetNearestNotificationSendTime(arg0 context.Context) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNearestNotificationSendTime", arg0)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNearestNotificationSendTime indicates an expected call of GetNearestNotificationSendTime.
func (mr *MockPeriodicEventsRepositoryMockRecorder) GetNearestNotificationSendTime(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNearestNotificationSendTime", reflect.TypeOf((*MockPeriodicEventsRepository)(nil).GetNearestNotificationSendTime), arg0)
}

// ListFutureEvents mocks base method.
func (m *MockPeriodicEventsRepository) ListFutureEvents(arg0 context.Context, arg1 int, arg2 service.ListParams) ([]domains.PeriodicEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFutureEvents", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domains.PeriodicEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFutureEvents indicates an expected call of ListFutureEvents.
func (mr *MockPeriodicEventsRepositoryMockRecorder) ListFutureEvents(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFutureEvents", reflect.TypeOf((*MockPeriodicEventsRepository)(nil).ListFutureEvents), arg0, arg1, arg2)
}

// ListNotificationsAtSendTime mocks base method.
func (m *MockPeriodicEventsRepository) ListNotificationsAtSendTime(arg0 context.Context, arg1 time.Time) ([]domains.PeriodicEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotificationsAtSendTime", arg0, arg1)
	ret0, _ := ret[0].([]domains.PeriodicEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotificationsAtSendTime indicates an expected call of ListNotificationsAtSendTime.
func (mr *MockPeriodicEventsRepositoryMockRecorder) ListNotificationsAtSendTime(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotificationsAtSendTime", reflect.TypeOf((*MockPeriodicEventsRepository)(nil).ListNotificationsAtSendTime), arg0, arg1)
}

// MarkNotificationDone mocks base method.
func (m *MockPeriodicEventsRepository) MarkNotificationDone(arg0 context.Context, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkNotificationDone", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkNotificationDone indicates an expected call of MarkNotificationDone.
func (mr *MockPeriodicEventsRepositoryMockRecorder) MarkNotificationDone(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkNotificationDone", reflect.TypeOf((*MockPeriodicEventsRepository)(nil).MarkNotificationDone), arg0, arg1, arg2)
}

// MarkNotificationSend mocks base method.
func (m *MockPeriodicEventsRepository) MarkNotificationSend(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkNotificationSend", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkNotificationSend indicates an expected call of MarkNotificationSend.
func (mr *MockPeriodicEventsRepositoryMockRecorder) MarkNotificationSend(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkNotificationSend", reflect.TypeOf((*MockPeriodicEventsRepository)(nil).MarkNotificationSend), arg0, arg1)
}

// Update mocks base method.
func (m *MockPeriodicEventsRepository) Update(arg0 context.Context, arg1 service.UpdatePeriodicEventParams) (domains.PeriodicEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(domains.PeriodicEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPeriodicEventsRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPeriodicEventsRepository)(nil).Update), arg0, arg1)
}
