// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Dyleme/Notifier/internal/service/service (interfaces: NotificationsRepository)
//
// Generated by this command:
//
//	mockgen -destination=mocks/notifications.go -package=mocks . NotificationsRepository
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domains "github.com/Dyleme/Notifier/internal/domains"
	service "github.com/Dyleme/Notifier/internal/service/service"
	timeborders "github.com/Dyleme/Notifier/pkg/utils/timeborders"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationsRepository is a mock of NotificationsRepository interface.
type MockNotificationsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationsRepositoryMockRecorder
}

// MockNotificationsRepositoryMockRecorder is the mock recorder for MockNotificationsRepository.
type MockNotificationsRepositoryMockRecorder struct {
	mock *MockNotificationsRepository
}

// NewMockNotificationsRepository creates a new mock instance.
func NewMockNotificationsRepository(ctrl *gomock.Controller) *MockNotificationsRepository {
	mock := &MockNotificationsRepository{ctrl: ctrl}
	mock.recorder = &MockNotificationsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationsRepository) EXPECT() *MockNotificationsRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockNotificationsRepository) Add(arg0 context.Context, arg1 domains.Notification) (domains.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(domains.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockNotificationsRepositoryMockRecorder) Add(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockNotificationsRepository)(nil).Add), arg0, arg1)
}

// Delete mocks base method.
func (m *MockNotificationsRepository) Delete(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNotificationsRepositoryMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNotificationsRepository)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockNotificationsRepository) Get(arg0 context.Context, arg1 int) (domains.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(domains.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNotificationsRepositoryMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNotificationsRepository)(nil).Get), arg0, arg1)
}

// GetLatest mocks base method.
func (m *MockNotificationsRepository) GetLatest(arg0 context.Context, arg1 int) (domains.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatest", arg0, arg1)
	ret0, _ := ret[0].(domains.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatest indicates an expected call of GetLatest.
func (mr *MockNotificationsRepositoryMockRecorder) GetLatest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatest", reflect.TypeOf((*MockNotificationsRepository)(nil).GetLatest), arg0, arg1)
}

// GetNearest mocks base method.
func (m *MockNotificationsRepository) GetNearest(arg0 context.Context, arg1 time.Time) (domains.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNearest", arg0, arg1)
	ret0, _ := ret[0].(domains.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNearest indicates an expected call of GetNearest.
func (mr *MockNotificationsRepositoryMockRecorder) GetNearest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNearest", reflect.TypeOf((*MockNotificationsRepository)(nil).GetNearest), arg0, arg1)
}

// List mocks base method.
func (m *MockNotificationsRepository) List(arg0 context.Context, arg1 int, arg2 timeborders.TimeBorders, arg3 service.ListParams) ([]domains.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]domains.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockNotificationsRepositoryMockRecorder) List(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNotificationsRepository)(nil).List), arg0, arg1, arg2, arg3)
}

// ListNotSended mocks base method.
func (m *MockNotificationsRepository) ListNotSended(arg0 context.Context, arg1 time.Time) ([]domains.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotSended", arg0, arg1)
	ret0, _ := ret[0].([]domains.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotSended indicates an expected call of ListNotSended.
func (mr *MockNotificationsRepositoryMockRecorder) ListNotSended(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotSended", reflect.TypeOf((*MockNotificationsRepository)(nil).ListNotSended), arg0, arg1)
}

// MarkSended mocks base method.
func (m *MockNotificationsRepository) MarkSended(arg0 context.Context, arg1 []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkSended", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkSended indicates an expected call of MarkSended.
func (mr *MockNotificationsRepositoryMockRecorder) MarkSended(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSended", reflect.TypeOf((*MockNotificationsRepository)(nil).MarkSended), arg0, arg1)
}

// Update mocks base method.
func (m *MockNotificationsRepository) Update(arg0 context.Context, arg1 domains.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockNotificationsRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNotificationsRepository)(nil).Update), arg0, arg1)
}
