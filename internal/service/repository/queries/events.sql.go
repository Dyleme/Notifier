// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: events.sql

package queries

import (
	"context"

	domains "github.com/Dyleme/Notifier/internal/domains"
	"github.com/jackc/pgx/v5/pgtype"
)

const addEvent = `-- name: AddEvent :one
INSERT INTO events (user_id,
                    text,
                    start,
                    description,
                    done,
                    notification_params,
                    send_time,
                    sended)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8)
RETURNING id, created_at, text, description, user_id, start, done, notification_params, send_time, sended
`

type AddEventParams struct {
	UserID             int32                       `db:"user_id"`
	Text               string                      `db:"text"`
	Start              pgtype.Timestamptz          `db:"start"`
	Description        pgtype.Text                 `db:"description"`
	Done               bool                        `db:"done"`
	NotificationParams *domains.NotificationParams `db:"notification_params"`
	SendTime           pgtype.Timestamptz          `db:"send_time"`
	Sended             bool                        `db:"sended"`
}

func (q *Queries) AddEvent(ctx context.Context, arg AddEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, addEvent,
		arg.UserID,
		arg.Text,
		arg.Start,
		arg.Description,
		arg.Done,
		arg.NotificationParams,
		arg.SendTime,
		arg.Sended,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Text,
		&i.Description,
		&i.UserID,
		&i.Start,
		&i.Done,
		&i.NotificationParams,
		&i.SendTime,
		&i.Sended,
	)
	return i, err
}

const countGetEventsInPeriod = `-- name: CountGetEventsInPeriod :one
SELECT COUNT(*)
FROM events
WHERE user_id = $1
  AND start BETWEEN $2 AND $3
`

type CountGetEventsInPeriodParams struct {
	UserID   int32              `db:"user_id"`
	FromTime pgtype.Timestamptz `db:"from_time"`
	ToTime   pgtype.Timestamptz `db:"to_time"`
}

func (q *Queries) CountGetEventsInPeriod(ctx context.Context, arg CountGetEventsInPeriodParams) (int64, error) {
	row := q.db.QueryRow(ctx, countGetEventsInPeriod, arg.UserID, arg.FromTime, arg.ToTime)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countListEvents = `-- name: CountListEvents :one
SELECT COUNT(*)
FROM events
WHERE user_id = $1
`

func (q *Queries) CountListEvents(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countListEvents, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const delayEvent = `-- name: DelayEvent :exec
UPDATE events AS t
SET send_time =  $1::TIMESTAMP,
    sended = FALSE
WHERE id = $2
  AND user_id = $3
`

type DelayEventParams struct {
	Till   pgtype.Timestamp `db:"till"`
	ID     int32            `db:"id"`
	UserID int32            `db:"user_id"`
}

func (q *Queries) DelayEvent(ctx context.Context, arg DelayEventParams) error {
	_, err := q.db.Exec(ctx, delayEvent, arg.Till, arg.ID, arg.UserID)
	return err
}

const deleteEvent = `-- name: DeleteEvent :many
DELETE
FROM events
WHERE id = $1
AND user_id = $2
RETURNING id, created_at, text, description, user_id, start, done, notification_params, send_time, sended
`

type DeleteEventParams struct {
	ID     int32 `db:"id"`
	UserID int32 `db:"user_id"`
}

func (q *Queries) DeleteEvent(ctx context.Context, arg DeleteEventParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, deleteEvent, arg.ID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Text,
			&i.Description,
			&i.UserID,
			&i.Start,
			&i.Done,
			&i.NotificationParams,
			&i.SendTime,
			&i.Sended,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEvent = `-- name: GetEvent :one
SELECT id, created_at, text, description, user_id, start, done, notification_params, send_time, sended
FROM events
WHERE id = $1
  AND user_id = $2
`

type GetEventParams struct {
	ID     int32 `db:"id"`
	UserID int32 `db:"user_id"`
}

func (q *Queries) GetEvent(ctx context.Context, arg GetEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, getEvent, arg.ID, arg.UserID)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Text,
		&i.Description,
		&i.UserID,
		&i.Start,
		&i.Done,
		&i.NotificationParams,
		&i.SendTime,
		&i.Sended,
	)
	return i, err
}

const getEventsInPeriod = `-- name: GetEventsInPeriod :many
SELECT id, created_at, text, description, user_id, start, done, notification_params, send_time, sended
FROM events
WHERE user_id = $1
  AND start BETWEEN $2 AND $3
ORDER BY id DESC
LIMIT $5 OFFSET $4
`

type GetEventsInPeriodParams struct {
	UserID   int32              `db:"user_id"`
	FromTime pgtype.Timestamptz `db:"from_time"`
	ToTime   pgtype.Timestamptz `db:"to_time"`
	Off      int32              `db:"off"`
	Lim      int32              `db:"lim"`
}

func (q *Queries) GetEventsInPeriod(ctx context.Context, arg GetEventsInPeriodParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, getEventsInPeriod,
		arg.UserID,
		arg.FromTime,
		arg.ToTime,
		arg.Off,
		arg.Lim,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Text,
			&i.Description,
			&i.UserID,
			&i.Start,
			&i.Done,
			&i.NotificationParams,
			&i.SendTime,
			&i.Sended,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEvents = `-- name: ListEvents :many
SELECT id, created_at, text, description, user_id, start, done, notification_params, send_time, sended
FROM events
WHERE user_id = $1
ORDER BY id DESC
LIMIT $3 OFFSET $2
`

type ListEventsParams struct {
	UserID int32 `db:"user_id"`
	Off    int32 `db:"off"`
	Lim    int32 `db:"lim"`
}

func (q *Queries) ListEvents(ctx context.Context, arg ListEventsParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, listEvents, arg.UserID, arg.Off, arg.Lim)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Text,
			&i.Description,
			&i.UserID,
			&i.Start,
			&i.Done,
			&i.NotificationParams,
			&i.SendTime,
			&i.Sended,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNearestEvents = `-- name: ListNearestEvents :many
SELECT id, created_at, text, description, user_id, start, done, notification_params, send_time, sended
FROM events
WHERE sended = FALSE
  AND send_time < $1
ORDER BY start
`

func (q *Queries) ListNearestEvents(ctx context.Context, nearestTime pgtype.Timestamptz) ([]Event, error) {
	rows, err := q.db.Query(ctx, listNearestEvents, nearestTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Text,
			&i.Description,
			&i.UserID,
			&i.Start,
			&i.Done,
			&i.NotificationParams,
			&i.SendTime,
			&i.Sended,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markSendedNotificationEvent = `-- name: MarkSendedNotificationEvent :exec
UPDATE events
SET sended = TRUE
WHERE id = $1
`

func (q *Queries) MarkSendedNotificationEvent(ctx context.Context, eventID int32) error {
	_, err := q.db.Exec(ctx, markSendedNotificationEvent, eventID)
	return err
}

const nearestEventTime = `-- name: NearestEventTime :one
SELECT send_time as t
FROM events
WHERE done = FALSE
  AND sended = FALSE
ORDER BY start
LIMIT 1
`

func (q *Queries) NearestEventTime(ctx context.Context) (pgtype.Timestamptz, error) {
	row := q.db.QueryRow(ctx, nearestEventTime)
	var t pgtype.Timestamptz
	err := row.Scan(&t)
	return t, err
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events
SET start       = $1,
    text        = $2,
    description = $3,
    done        = $4,
    notification_params = $5,
    sended = $6,
    send_time = $7
WHERE id = $8
  AND user_id = $9
RETURNING id, created_at, text, description, user_id, start, done, notification_params, send_time, sended
`

type UpdateEventParams struct {
	Start              pgtype.Timestamptz          `db:"start"`
	Text               string                      `db:"text"`
	Description        pgtype.Text                 `db:"description"`
	Done               bool                        `db:"done"`
	NotificationParams *domains.NotificationParams `db:"notification_params"`
	Sended             bool                        `db:"sended"`
	SendTime           pgtype.Timestamptz          `db:"send_time"`
	ID                 int32                       `db:"id"`
	UserID             int32                       `db:"user_id"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, updateEvent,
		arg.Start,
		arg.Text,
		arg.Description,
		arg.Done,
		arg.NotificationParams,
		arg.Sended,
		arg.SendTime,
		arg.ID,
		arg.UserID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Text,
		&i.Description,
		&i.UserID,
		&i.Start,
		&i.Done,
		&i.NotificationParams,
		&i.SendTime,
		&i.Sended,
	)
	return i, err
}

const updateNotificationParams = `-- name: UpdateNotificationParams :one
UPDATE events AS t
SET notification_params = notification_params ||  $1
WHERE id = $2
  AND user_id = $3
RETURNING notification_params
`

type UpdateNotificationParamsParams struct {
	Params *domains.NotificationParams `db:"params"`
	ID     int32                       `db:"id"`
	UserID int32                       `db:"user_id"`
}

func (q *Queries) UpdateNotificationParams(ctx context.Context, arg UpdateNotificationParamsParams) (*domains.NotificationParams, error) {
	row := q.db.QueryRow(ctx, updateNotificationParams, arg.Params, arg.ID, arg.UserID)
	var notification_params *domains.NotificationParams
	err := row.Scan(&notification_params)
	return notification_params, err
}
