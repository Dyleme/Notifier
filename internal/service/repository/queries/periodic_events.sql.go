// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: periodic_events.sql

package queries

import (
	"context"

	domains "github.com/Dyleme/Notifier/internal/domains"
	"github.com/jackc/pgx/v5/pgtype"
)

const addPeriodicEvent = `-- name: AddPeriodicEvent :one
INSERT INTO periodic_events (user_id,
                             text,
                             start,
                             smallest_period,
                             biggest_period,
                             description,
                             notification_params
)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7)
RETURNING id, created_at, text, description, user_id, start, smallest_period, biggest_period, notification_params
`

type AddPeriodicEventParams struct {
	UserID             int32                       `db:"user_id"`
	Text               string                      `db:"text"`
	Start              pgtype.Timestamptz          `db:"start"`
	SmallestPeriod     int32                       `db:"smallest_period"`
	BiggestPeriod      int32                       `db:"biggest_period"`
	Description        pgtype.Text                 `db:"description"`
	NotificationParams *domains.NotificationParams `db:"notification_params"`
}

func (q *Queries) AddPeriodicEvent(ctx context.Context, db DBTX, arg AddPeriodicEventParams) (PeriodicEvent, error) {
	row := db.QueryRow(ctx, addPeriodicEvent,
		arg.UserID,
		arg.Text,
		arg.Start,
		arg.SmallestPeriod,
		arg.BiggestPeriod,
		arg.Description,
		arg.NotificationParams,
	)
	var i PeriodicEvent
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Text,
		&i.Description,
		&i.UserID,
		&i.Start,
		&i.SmallestPeriod,
		&i.BiggestPeriod,
		&i.NotificationParams,
	)
	return i, err
}

const countListPeriodicEvents = `-- name: CountListPeriodicEvents :one
SELECT COUNT(*)
FROM periodic_events
WHERE user_id = $1
`

func (q *Queries) CountListPeriodicEvents(ctx context.Context, db DBTX, userID int32) (int64, error) {
	row := db.QueryRow(ctx, countListPeriodicEvents, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deletePeriodicEvent = `-- name: DeletePeriodicEvent :many
DELETE
FROM periodic_events
WHERE id = $1
RETURNING id, created_at, text, description, user_id, start, smallest_period, biggest_period, notification_params
`

func (q *Queries) DeletePeriodicEvent(ctx context.Context, db DBTX, id int32) ([]PeriodicEvent, error) {
	rows, err := db.Query(ctx, deletePeriodicEvent, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PeriodicEvent
	for rows.Next() {
		var i PeriodicEvent
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Text,
			&i.Description,
			&i.UserID,
			&i.Start,
			&i.SmallestPeriod,
			&i.BiggestPeriod,
			&i.NotificationParams,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPeriodicEvent = `-- name: GetPeriodicEvent :one
SELECT id, created_at, text, description, user_id, start, smallest_period, biggest_period, notification_params
FROM periodic_events
WHERE id = $1
`

func (q *Queries) GetPeriodicEvent(ctx context.Context, db DBTX, id int32) (PeriodicEvent, error) {
	row := db.QueryRow(ctx, getPeriodicEvent, id)
	var i PeriodicEvent
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Text,
		&i.Description,
		&i.UserID,
		&i.Start,
		&i.SmallestPeriod,
		&i.BiggestPeriod,
		&i.NotificationParams,
	)
	return i, err
}

const listPeriodicEvents = `-- name: ListPeriodicEvents :many
SELECT id, created_at, text, description, user_id, start, smallest_period, biggest_period, notification_params
FROM periodic_events
WHERE user_id = $1
ORDER BY id DESC
LIMIT $3 OFFSET $2
`

type ListPeriodicEventsParams struct {
	UserID int32 `db:"user_id"`
	Off    int32 `db:"off"`
	Lim    int32 `db:"lim"`
}

func (q *Queries) ListPeriodicEvents(ctx context.Context, db DBTX, arg ListPeriodicEventsParams) ([]PeriodicEvent, error) {
	rows, err := db.Query(ctx, listPeriodicEvents, arg.UserID, arg.Off, arg.Lim)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PeriodicEvent
	for rows.Next() {
		var i PeriodicEvent
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Text,
			&i.Description,
			&i.UserID,
			&i.Start,
			&i.SmallestPeriod,
			&i.BiggestPeriod,
			&i.NotificationParams,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePeriodicEvent = `-- name: UpdatePeriodicEvent :one
UPDATE periodic_events
SET start               = $1,
    text                = $2,
    description         = $3,
    notification_params = $4,
    smallest_period     = $5,
    biggest_period      = $6
WHERE id = $7
  AND user_id = $8
RETURNING id, created_at, text, description, user_id, start, smallest_period, biggest_period, notification_params
`

type UpdatePeriodicEventParams struct {
	Start              pgtype.Timestamptz          `db:"start"`
	Text               string                      `db:"text"`
	Description        pgtype.Text                 `db:"description"`
	NotificationParams *domains.NotificationParams `db:"notification_params"`
	SmallestPeriod     int32                       `db:"smallest_period"`
	BiggestPeriod      int32                       `db:"biggest_period"`
	ID                 int32                       `db:"id"`
	UserID             int32                       `db:"user_id"`
}

func (q *Queries) UpdatePeriodicEvent(ctx context.Context, db DBTX, arg UpdatePeriodicEventParams) (PeriodicEvent, error) {
	row := db.QueryRow(ctx, updatePeriodicEvent,
		arg.Start,
		arg.Text,
		arg.Description,
		arg.NotificationParams,
		arg.SmallestPeriod,
		arg.BiggestPeriod,
		arg.ID,
		arg.UserID,
	)
	var i PeriodicEvent
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Text,
		&i.Description,
		&i.UserID,
		&i.Start,
		&i.SmallestPeriod,
		&i.BiggestPeriod,
		&i.NotificationParams,
	)
	return i, err
}
