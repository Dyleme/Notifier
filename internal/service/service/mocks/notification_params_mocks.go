// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Dyleme/Notifier/internal/service/service (interfaces: NotificationParamsRepository)
//
// Generated by this command:
//
//	mockgen -destination=mocks/notification_params_mocks.go -package=mocks . NotificationParamsRepository
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Dyleme/Notifier/internal/domains"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationParamsRepository is a mock of NotificationParamsRepository interface.
type MockNotificationParamsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationParamsRepositoryMockRecorder
}

// MockNotificationParamsRepositoryMockRecorder is the mock recorder for MockNotificationParamsRepository.
type MockNotificationParamsRepositoryMockRecorder struct {
	mock *MockNotificationParamsRepository
}

// NewMockNotificationParamsRepository creates a new mock instance.
func NewMockNotificationParamsRepository(ctrl *gomock.Controller) *MockNotificationParamsRepository {
	mock := &MockNotificationParamsRepository{ctrl: ctrl}
	mock.recorder = &MockNotificationParamsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationParamsRepository) EXPECT() *MockNotificationParamsRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockNotificationParamsRepository) Get(arg0 context.Context, arg1 int) (domain.NotificationParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(domain.NotificationParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNotificationParamsRepositoryMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNotificationParamsRepository)(nil).Get), arg0, arg1)
}

// Set mocks base method.
func (m *MockNotificationParamsRepository) Set(arg0 context.Context, arg1 int, arg2 domain.NotificationParams) (domain.NotificationParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.NotificationParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockNotificationParamsRepositoryMockRecorder) Set(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockNotificationParamsRepository)(nil).Set), arg0, arg1, arg2)
}
