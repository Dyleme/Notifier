// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: users.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUser = `-- name: AddUser :one
INSERT INTO users (
                   email,
                   password_hash,
                   tg_id
                   )
VALUES (
        $1,
        $2,
        $3
       )
RETURNING id, email, password_hash, tg_id
`

type AddUserParams struct {
	Email        pgtype.Text
	PasswordHash pgtype.Text
	TgID         pgtype.Int4
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (User, error) {
	row := q.db.QueryRow(ctx, addUser, arg.Email, arg.PasswordHash, arg.TgID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.TgID,
	)
	return i, err
}

const findUser = `-- name: FindUser :one
SELECT id, email, password_hash, tg_id
FROM users
WHERE email = $1
   OR tg_id = $2
`

type FindUserParams struct {
	Email pgtype.Text
	TgID  pgtype.Int4
}

func (q *Queries) FindUser(ctx context.Context, arg FindUserParams) (User, error) {
	row := q.db.QueryRow(ctx, findUser, arg.Email, arg.TgID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.TgID,
	)
	return i, err
}

const getLoginParameters = `-- name: GetLoginParameters :one
SELECT id,
       password_hash
FROM users
WHERE email = $1
`

type GetLoginParametersRow struct {
	ID           int32
	PasswordHash pgtype.Text
}

func (q *Queries) GetLoginParameters(ctx context.Context, email pgtype.Text) (GetLoginParametersRow, error) {
	row := q.db.QueryRow(ctx, getLoginParameters, email)
	var i GetLoginParametersRow
	err := row.Scan(&i.ID, &i.PasswordHash)
	return i, err
}
