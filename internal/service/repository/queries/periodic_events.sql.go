// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: periodic_events.sql

package queries

import (
	"context"

	domains "github.com/Dyleme/Notifier/internal/domains"
	"github.com/jackc/pgx/v5/pgtype"
)

const addPeriodicEvent = `-- name: AddPeriodicEvent :one
INSERT INTO periodic_events (user_id,
                             text,
                             start,
                             smallest_period,
                             biggest_period,
                             description,
                             notification_params
)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7)
RETURNING id, created_at, text, description, user_id, start, smallest_period, biggest_period, notification_params
`

type AddPeriodicEventParams struct {
	UserID             int32                       `db:"user_id"`
	Text               string                      `db:"text"`
	Start              pgtype.Timestamptz          `db:"start"`
	SmallestPeriod     int32                       `db:"smallest_period"`
	BiggestPeriod      int32                       `db:"biggest_period"`
	Description        pgtype.Text                 `db:"description"`
	NotificationParams *domains.NotificationParams `db:"notification_params"`
}

func (q *Queries) AddPeriodicEvent(ctx context.Context, arg AddPeriodicEventParams) (PeriodicEvent, error) {
	row := q.db.QueryRow(ctx, addPeriodicEvent,
		arg.UserID,
		arg.Text,
		arg.Start,
		arg.SmallestPeriod,
		arg.BiggestPeriod,
		arg.Description,
		arg.NotificationParams,
	)
	var i PeriodicEvent
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Text,
		&i.Description,
		&i.UserID,
		&i.Start,
		&i.SmallestPeriod,
		&i.BiggestPeriod,
		&i.NotificationParams,
	)
	return i, err
}

const addPeriodicEventNotification = `-- name: AddPeriodicEventNotification :one
INSERT INTO periodic_events_notifications
(periodic_event_id,
 send_time
)
VALUES ($1,
        $2
       )
RETURNING id, created_at, periodic_event_id, send_time, sended, done
`

type AddPeriodicEventNotificationParams struct {
	PeriodicEventID int32              `db:"periodic_event_id"`
	SendTime        pgtype.Timestamptz `db:"send_time"`
}

func (q *Queries) AddPeriodicEventNotification(ctx context.Context, arg AddPeriodicEventNotificationParams) (PeriodicEventsNotification, error) {
	row := q.db.QueryRow(ctx, addPeriodicEventNotification, arg.PeriodicEventID, arg.SendTime)
	var i PeriodicEventsNotification
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.PeriodicEventID,
		&i.SendTime,
		&i.Sended,
		&i.Done,
	)
	return i, err
}

const countListPeriodicEvents = `-- name: CountListPeriodicEvents :one
SELECT COUNT(*)
FROM periodic_events
WHERE user_id = $1
`

func (q *Queries) CountListPeriodicEvents(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countListPeriodicEvents, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countListPeriodicEventsInPeriod = `-- name: CountListPeriodicEventsInPeriod :one
SELECT COUNT(*)
FROM periodic_events AS pe
         JOIN periodic_events_notifications AS pen
              ON pe.id = pen.periodic_event_id
WHERE user_id = $1
  AND pen.send_time BETWEEN $2 AND $3
`

type CountListPeriodicEventsInPeriodParams struct {
	UserID   int32              `db:"user_id"`
	FromTime pgtype.Timestamptz `db:"from_time"`
	ToTime   pgtype.Timestamptz `db:"to_time"`
}

func (q *Queries) CountListPeriodicEventsInPeriod(ctx context.Context, arg CountListPeriodicEventsInPeriodParams) (int64, error) {
	row := q.db.QueryRow(ctx, countListPeriodicEventsInPeriod, arg.UserID, arg.FromTime, arg.ToTime)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const currentPeriodicEventNotification = `-- name: CurrentPeriodicEventNotification :one
SELECT id, created_at, periodic_event_id, send_time, sended, done
FROM periodic_events_notifications
WHERE periodic_event_id = $1
ORDER BY send_time DESC
LIMIT 1
`

func (q *Queries) CurrentPeriodicEventNotification(ctx context.Context, periodicEventID int32) (PeriodicEventsNotification, error) {
	row := q.db.QueryRow(ctx, currentPeriodicEventNotification, periodicEventID)
	var i PeriodicEventsNotification
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.PeriodicEventID,
		&i.SendTime,
		&i.Sended,
		&i.Done,
	)
	return i, err
}

const delayPeriodicEventNotification = `-- name: DelayPeriodicEventNotification :exec
UPDATE periodic_events_notifications
SET send_time = $1::TIMESTAMP,
    sended    = FALSE
WHERE id = $2
`

type DelayPeriodicEventNotificationParams struct {
	Till pgtype.Timestamp `db:"till"`
	ID   int32            `db:"id"`
}

func (q *Queries) DelayPeriodicEventNotification(ctx context.Context, arg DelayPeriodicEventNotificationParams) error {
	_, err := q.db.Exec(ctx, delayPeriodicEventNotification, arg.Till, arg.ID)
	return err
}

const deletePeriodicEvent = `-- name: DeletePeriodicEvent :many
DELETE
FROM periodic_events
WHERE id = $1
  AND user_id = $2
RETURNING id, created_at, text, description, user_id, start, smallest_period, biggest_period, notification_params
`

type DeletePeriodicEventParams struct {
	ID     int32 `db:"id"`
	UserID int32 `db:"user_id"`
}

func (q *Queries) DeletePeriodicEvent(ctx context.Context, arg DeletePeriodicEventParams) ([]PeriodicEvent, error) {
	rows, err := q.db.Query(ctx, deletePeriodicEvent, arg.ID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PeriodicEvent
	for rows.Next() {
		var i PeriodicEvent
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Text,
			&i.Description,
			&i.UserID,
			&i.Start,
			&i.SmallestPeriod,
			&i.BiggestPeriod,
			&i.NotificationParams,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deletePeriodicEventNotification = `-- name: DeletePeriodicEventNotification :many
DELETE
FROM periodic_events_notifications
WHERE id = $1
  AND periodic_event_id = $2
RETURNING id, created_at, periodic_event_id, send_time, sended, done
`

type DeletePeriodicEventNotificationParams struct {
	ID              int32 `db:"id"`
	PeriodicEventID int32 `db:"periodic_event_id"`
}

func (q *Queries) DeletePeriodicEventNotification(ctx context.Context, arg DeletePeriodicEventNotificationParams) ([]PeriodicEventsNotification, error) {
	rows, err := q.db.Query(ctx, deletePeriodicEventNotification, arg.ID, arg.PeriodicEventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PeriodicEventsNotification
	for rows.Next() {
		var i PeriodicEventsNotification
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.PeriodicEventID,
			&i.SendTime,
			&i.Sended,
			&i.Done,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deletePeriodicEventNotifications = `-- name: DeletePeriodicEventNotifications :many
DELETE FROM periodic_events_notifications
WHERE periodic_event_id = $1
RETURNING id, created_at, periodic_event_id, send_time, sended, done
`

func (q *Queries) DeletePeriodicEventNotifications(ctx context.Context, periodicEventID int32) ([]PeriodicEventsNotification, error) {
	rows, err := q.db.Query(ctx, deletePeriodicEventNotifications, periodicEventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PeriodicEventsNotification
	for rows.Next() {
		var i PeriodicEventsNotification
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.PeriodicEventID,
			&i.SendTime,
			&i.Sended,
			&i.Done,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPeriodicEvent = `-- name: GetPeriodicEvent :one
SELECT id, created_at, text, description, user_id, start, smallest_period, biggest_period, notification_params
FROM periodic_events
WHERE id = $1
  AND user_id = $2
`

type GetPeriodicEventParams struct {
	ID     int32 `db:"id"`
	UserID int32 `db:"user_id"`
}

func (q *Queries) GetPeriodicEvent(ctx context.Context, arg GetPeriodicEventParams) (PeriodicEvent, error) {
	row := q.db.QueryRow(ctx, getPeriodicEvent, arg.ID, arg.UserID)
	var i PeriodicEvent
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Text,
		&i.Description,
		&i.UserID,
		&i.Start,
		&i.SmallestPeriod,
		&i.BiggestPeriod,
		&i.NotificationParams,
	)
	return i, err
}

const listNearestPeriodicEvents = `-- name: ListNearestPeriodicEvents :many
SELECT pe.id, pe.created_at, text, description, user_id, start, smallest_period, biggest_period, notification_params, pen.id, pen.created_at, periodic_event_id, send_time, sended, done
FROM periodic_events AS pe
         JOIN periodic_events_notifications AS pen
              ON pe.id = pen.periodic_event_id
WHERE pen.done = FALSE
  AND pen.sended = FALSE
  AND pen.send_time < $1
ORDER BY pen.send_time
`

type ListNearestPeriodicEventsRow struct {
	ID                 int32                       `db:"id"`
	CreatedAt          pgtype.Timestamp            `db:"created_at"`
	Text               string                      `db:"text"`
	Description        pgtype.Text                 `db:"description"`
	UserID             int32                       `db:"user_id"`
	Start              pgtype.Timestamptz          `db:"start"`
	SmallestPeriod     int32                       `db:"smallest_period"`
	BiggestPeriod      int32                       `db:"biggest_period"`
	NotificationParams *domains.NotificationParams `db:"notification_params"`
	ID_2               int32                       `db:"id_2"`
	CreatedAt_2        pgtype.Timestamp            `db:"created_at_2"`
	PeriodicEventID    int32                       `db:"periodic_event_id"`
	SendTime           pgtype.Timestamptz          `db:"send_time"`
	Sended             bool                        `db:"sended"`
	Done               bool                        `db:"done"`
}

func (q *Queries) ListNearestPeriodicEvents(ctx context.Context, nearestTime pgtype.Timestamptz) ([]ListNearestPeriodicEventsRow, error) {
	rows, err := q.db.Query(ctx, listNearestPeriodicEvents, nearestTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListNearestPeriodicEventsRow
	for rows.Next() {
		var i ListNearestPeriodicEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Text,
			&i.Description,
			&i.UserID,
			&i.Start,
			&i.SmallestPeriod,
			&i.BiggestPeriod,
			&i.NotificationParams,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.PeriodicEventID,
			&i.SendTime,
			&i.Sended,
			&i.Done,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPeriodicEvents = `-- name: ListPeriodicEvents :many
SELECT id, created_at, text, description, user_id, start, smallest_period, biggest_period, notification_params
FROM periodic_events
WHERE user_id = $1
ORDER BY id DESC
LIMIT $3 OFFSET $2
`

type ListPeriodicEventsParams struct {
	UserID int32 `db:"user_id"`
	Off    int32 `db:"off"`
	Lim    int32 `db:"lim"`
}

func (q *Queries) ListPeriodicEvents(ctx context.Context, arg ListPeriodicEventsParams) ([]PeriodicEvent, error) {
	rows, err := q.db.Query(ctx, listPeriodicEvents, arg.UserID, arg.Off, arg.Lim)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PeriodicEvent
	for rows.Next() {
		var i PeriodicEvent
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Text,
			&i.Description,
			&i.UserID,
			&i.Start,
			&i.SmallestPeriod,
			&i.BiggestPeriod,
			&i.NotificationParams,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPeriodicEventsInPeriod = `-- name: ListPeriodicEventsInPeriod :many
SELECT pe.id, pe.created_at, text, description, user_id, start, smallest_period, biggest_period, notification_params, pen.id, pen.created_at, periodic_event_id, send_time, sended, done
FROM periodic_events AS pe
         JOIN periodic_events_notifications AS pen
              ON pe.id = pen.periodic_event_id
WHERE user_id = $1
  AND pen.send_time BETWEEN $2 AND $3
ORDER BY pen.send_time DESC
LIMIT $5 OFFSET $4
`

type ListPeriodicEventsInPeriodParams struct {
	UserID   int32              `db:"user_id"`
	FromTime pgtype.Timestamptz `db:"from_time"`
	ToTime   pgtype.Timestamptz `db:"to_time"`
	Off      int32              `db:"off"`
	Lim      int32              `db:"lim"`
}

type ListPeriodicEventsInPeriodRow struct {
	ID                 int32                       `db:"id"`
	CreatedAt          pgtype.Timestamp            `db:"created_at"`
	Text               string                      `db:"text"`
	Description        pgtype.Text                 `db:"description"`
	UserID             int32                       `db:"user_id"`
	Start              pgtype.Timestamptz          `db:"start"`
	SmallestPeriod     int32                       `db:"smallest_period"`
	BiggestPeriod      int32                       `db:"biggest_period"`
	NotificationParams *domains.NotificationParams `db:"notification_params"`
	ID_2               int32                       `db:"id_2"`
	CreatedAt_2        pgtype.Timestamp            `db:"created_at_2"`
	PeriodicEventID    int32                       `db:"periodic_event_id"`
	SendTime           pgtype.Timestamptz          `db:"send_time"`
	Sended             bool                        `db:"sended"`
	Done               bool                        `db:"done"`
}

func (q *Queries) ListPeriodicEventsInPeriod(ctx context.Context, arg ListPeriodicEventsInPeriodParams) ([]ListPeriodicEventsInPeriodRow, error) {
	rows, err := q.db.Query(ctx, listPeriodicEventsInPeriod,
		arg.UserID,
		arg.FromTime,
		arg.ToTime,
		arg.Off,
		arg.Lim,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPeriodicEventsInPeriodRow
	for rows.Next() {
		var i ListPeriodicEventsInPeriodRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Text,
			&i.Description,
			&i.UserID,
			&i.Start,
			&i.SmallestPeriod,
			&i.BiggestPeriod,
			&i.NotificationParams,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.PeriodicEventID,
			&i.SendTime,
			&i.Sended,
			&i.Done,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPeriodicEventsWithNotifications = `-- name: ListPeriodicEventsWithNotifications :many
SELECT pe.id, pe.created_at, text, description, user_id, start, smallest_period, biggest_period, notification_params, pen.id, pen.created_at, periodic_event_id, send_time, sended, done
FROM periodic_events as pe
JOIN periodic_events_notifications as pen
ON pen.periodic_event_id = pe.id
WHERE pen.done = FALSE
  AND pe.user_id = $1
ORDER BY send_time
LIMIT $3 OFFSET $2
`

type ListPeriodicEventsWithNotificationsParams struct {
	UserID int32 `db:"user_id"`
	Off    int32 `db:"off"`
	Lim    int32 `db:"lim"`
}

type ListPeriodicEventsWithNotificationsRow struct {
	ID                 int32                       `db:"id"`
	CreatedAt          pgtype.Timestamp            `db:"created_at"`
	Text               string                      `db:"text"`
	Description        pgtype.Text                 `db:"description"`
	UserID             int32                       `db:"user_id"`
	Start              pgtype.Timestamptz          `db:"start"`
	SmallestPeriod     int32                       `db:"smallest_period"`
	BiggestPeriod      int32                       `db:"biggest_period"`
	NotificationParams *domains.NotificationParams `db:"notification_params"`
	ID_2               int32                       `db:"id_2"`
	CreatedAt_2        pgtype.Timestamp            `db:"created_at_2"`
	PeriodicEventID    int32                       `db:"periodic_event_id"`
	SendTime           pgtype.Timestamptz          `db:"send_time"`
	Sended             bool                        `db:"sended"`
	Done               bool                        `db:"done"`
}

func (q *Queries) ListPeriodicEventsWithNotifications(ctx context.Context, arg ListPeriodicEventsWithNotificationsParams) ([]ListPeriodicEventsWithNotificationsRow, error) {
	rows, err := q.db.Query(ctx, listPeriodicEventsWithNotifications, arg.UserID, arg.Off, arg.Lim)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPeriodicEventsWithNotificationsRow
	for rows.Next() {
		var i ListPeriodicEventsWithNotificationsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Text,
			&i.Description,
			&i.UserID,
			&i.Start,
			&i.SmallestPeriod,
			&i.BiggestPeriod,
			&i.NotificationParams,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.PeriodicEventID,
			&i.SendTime,
			&i.Sended,
			&i.Done,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markPeriodicEventNotificationDone = `-- name: MarkPeriodicEventNotificationDone :exec
UPDATE periodic_events_notifications
SET done = TRUE
WHERE periodic_event_id = $1
`

func (q *Queries) MarkPeriodicEventNotificationDone(ctx context.Context, periodicEventID int32) error {
	_, err := q.db.Exec(ctx, markPeriodicEventNotificationDone, periodicEventID)
	return err
}

const markPeriodicEventNotificationSended = `-- name: MarkPeriodicEventNotificationSended :exec
UPDATE periodic_events_notifications
SET sended = TRUE
WHERE id = $1
`

func (q *Queries) MarkPeriodicEventNotificationSended(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, markPeriodicEventNotificationSended, id)
	return err
}

const nearestPeriodicEventTime = `-- name: NearestPeriodicEventTime :one
SELECT send_time AS t
FROM periodic_events_notifications
WHERE done = FALSE
  AND sended = FALSE
ORDER BY send_time
LIMIT 1
`

func (q *Queries) NearestPeriodicEventTime(ctx context.Context) (pgtype.Timestamptz, error) {
	row := q.db.QueryRow(ctx, nearestPeriodicEventTime)
	var t pgtype.Timestamptz
	err := row.Scan(&t)
	return t, err
}

const updatePeriodicEvent = `-- name: UpdatePeriodicEvent :one
UPDATE periodic_events
SET start               = $1,
    text                = $2,
    description         = $3,
    notification_params = $4,
    smallest_period     = $5,
    biggest_period      = $6
WHERE id = $7
  AND user_id = $8
RETURNING id, created_at, text, description, user_id, start, smallest_period, biggest_period, notification_params
`

type UpdatePeriodicEventParams struct {
	Start              pgtype.Timestamptz          `db:"start"`
	Text               string                      `db:"text"`
	Description        pgtype.Text                 `db:"description"`
	NotificationParams *domains.NotificationParams `db:"notification_params"`
	SmallestPeriod     int32                       `db:"smallest_period"`
	BiggestPeriod      int32                       `db:"biggest_period"`
	ID                 int32                       `db:"id"`
	UserID             int32                       `db:"user_id"`
}

func (q *Queries) UpdatePeriodicEvent(ctx context.Context, arg UpdatePeriodicEventParams) (PeriodicEvent, error) {
	row := q.db.QueryRow(ctx, updatePeriodicEvent,
		arg.Start,
		arg.Text,
		arg.Description,
		arg.NotificationParams,
		arg.SmallestPeriod,
		arg.BiggestPeriod,
		arg.ID,
		arg.UserID,
	)
	var i PeriodicEvent
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Text,
		&i.Description,
		&i.UserID,
		&i.Start,
		&i.SmallestPeriod,
		&i.BiggestPeriod,
		&i.NotificationParams,
	)
	return i, err
}
