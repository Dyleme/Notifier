// Package timetableapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package timetableapi

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// CreateTaskReqBody defines model for CreateTaskReqBody.
type CreateTaskReqBody struct {
	Message  string `json:"message"`
	Periodic bool   `json:"periodic"`

	// RequiredTime Required time for task in minutes
	RequiredTime int `json:"requiredTime"`
}

// SetTimetableTaskReqBody defines model for SetTimetableTaskReqBody.
type SetTimetableTaskReqBody struct {
	Description *string   `json:"description,omitempty"`
	Start       time.Time `json:"start"`
}

// Task defines model for Task.
type Task struct {
	Archived bool   `json:"archived"`
	Done     bool   `json:"done"`
	Id       int    `json:"id"`
	Message  string `json:"message"`
	Periodic bool   `json:"periodic"`

	// RequiredTime Required time for task in minutes
	RequiredTime int `json:"requiredTime"`
}

// TimetableTask defines model for TimetableTask.
type TimetableTask struct {
	Description *string   `json:"description,omitempty"`
	Done        bool      `json:"done"`
	Finish      time.Time `json:"finish"`
	Id          int       `json:"id"`
	Start       time.Time `json:"start"`
	TaskId      int       `json:"task_id"`
	Text        string    `json:"text"`
}

// UpdateTaskReqBody defines model for UpdateTaskReqBody.
type UpdateTaskReqBody struct {
	Archived bool   `json:"archived"`
	Done     bool   `json:"done"`
	Message  string `json:"message"`
	Periodic bool   `json:"periodic"`

	// RequiredTime Required time for task in minutes
	RequiredTime int `json:"requiredTime"`
}

// UpdateTimetableReqBody defines model for UpdateTimetableReqBody.
type UpdateTimetableReqBody struct {
	Description *string   `json:"description,omitempty"`
	Done        bool      `json:"done"`
	Start       time.Time `json:"start"`
}

// ListTimetableTasksParams defines parameters for ListTimetableTasks.
type ListTimetableTasksParams struct {
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`
	To   *time.Time `form:"to,omitempty" json:"to,omitempty"`
}

// AddTaskJSONRequestBody defines body for AddTask for application/json ContentType.
type AddTaskJSONRequestBody = CreateTaskReqBody

// UpdateTaskJSONRequestBody defines body for UpdateTask for application/json ContentType.
type UpdateTaskJSONRequestBody = UpdateTaskReqBody

// PostTimetableSetTaskIDJSONRequestBody defines body for PostTimetableSetTaskID for application/json ContentType.
type PostTimetableSetTaskIDJSONRequestBody = SetTimetableTaskReqBody

// UpdateTimetableTaskJSONRequestBody defines body for UpdateTimetableTask for application/json ContentType.
type UpdateTimetableTaskJSONRequestBody = UpdateTimetableReqBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List user tasks
	// (GET /task)
	ListTasks(w http.ResponseWriter, r *http.Request)
	// Add a new task
	// (POST /task)
	AddTask(w http.ResponseWriter, r *http.Request)
	// Get task
	// (GET /task/{taskID})
	GetTask(w http.ResponseWriter, r *http.Request, taskID int)
	// Add a new task
	// (PUT /task/{taskID})
	UpdateTask(w http.ResponseWriter, r *http.Request, taskID int)
	// List timetable tasks
	// (GET /timetable)
	ListTimetableTasks(w http.ResponseWriter, r *http.Request, params ListTimetableTasksParams)
	// Add a new timetable
	// (POST /timetable/set/{taskID})
	PostTimetableSetTaskID(w http.ResponseWriter, r *http.Request, taskID int)
	// Get timetable task
	// (GET /timetable/{timetableTaskID})
	GetTimetableTask(w http.ResponseWriter, r *http.Request, timetableTaskID int)
	// Update timetable task
	// (PUT /timetable/{timetableTaskID})
	UpdateTimetableTask(w http.ResponseWriter, r *http.Request, timetableTaskID int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListTasks operation middleware
func (siw *ServerInterfaceWrapper) ListTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTasks(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddTask operation middleware
func (siw *ServerInterfaceWrapper) AddTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddTask(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTask operation middleware
func (siw *ServerInterfaceWrapper) GetTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskID" -------------
	var taskID int

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskID", runtime.ParamLocationPath, chi.URLParam(r, "taskID"), &taskID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTask(w, r, taskID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTask operation middleware
func (siw *ServerInterfaceWrapper) UpdateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskID" -------------
	var taskID int

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskID", runtime.ParamLocationPath, chi.URLParam(r, "taskID"), &taskID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTask(w, r, taskID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListTimetableTasks operation middleware
func (siw *ServerInterfaceWrapper) ListTimetableTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTimetableTasksParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTimetableTasks(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostTimetableSetTaskID operation middleware
func (siw *ServerInterfaceWrapper) PostTimetableSetTaskID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskID" -------------
	var taskID int

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskID", runtime.ParamLocationPath, chi.URLParam(r, "taskID"), &taskID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostTimetableSetTaskID(w, r, taskID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTimetableTask operation middleware
func (siw *ServerInterfaceWrapper) GetTimetableTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "timetableTaskID" -------------
	var timetableTaskID int

	err = runtime.BindStyledParameterWithLocation("simple", false, "timetableTaskID", runtime.ParamLocationPath, chi.URLParam(r, "timetableTaskID"), &timetableTaskID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "timetableTaskID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTimetableTask(w, r, timetableTaskID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTimetableTask operation middleware
func (siw *ServerInterfaceWrapper) UpdateTimetableTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "timetableTaskID" -------------
	var timetableTaskID int

	err = runtime.BindStyledParameterWithLocation("simple", false, "timetableTaskID", runtime.ParamLocationPath, chi.URLParam(r, "timetableTaskID"), &timetableTaskID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "timetableTaskID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTimetableTask(w, r, timetableTaskID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/task", wrapper.ListTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/task", wrapper.AddTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/task/{taskID}", wrapper.GetTask)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/task/{taskID}", wrapper.UpdateTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/timetable", wrapper.ListTimetableTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/timetable/set/{taskID}", wrapper.PostTimetableSetTaskID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/timetable/{timetableTaskID}", wrapper.GetTimetableTask)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/timetable/{timetableTaskID}", wrapper.UpdateTimetableTask)
	})

	return r
}
