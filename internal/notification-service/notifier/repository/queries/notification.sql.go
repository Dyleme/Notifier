// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: notification.sql

package queries

import (
	"context"
	"encoding/json"
	"time"
)

const addNotification = `-- name: AddNotification :exec
INSERT INTO notification (
            user_id,
            message,
            notification_time,
            destination,
            task_id
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
`

type AddNotificationParams struct {
	UserID           int32
	Message          string
	NotificationTime time.Time
	Destination      json.RawMessage
	TaskID           int32
}

func (q *Queries) AddNotification(ctx context.Context, arg AddNotificationParams) error {
	_, err := q.db.ExecContext(ctx, addNotification,
		arg.UserID,
		arg.Message,
		arg.NotificationTime,
		arg.Destination,
		arg.TaskID,
	)
	return err
}

const deleteNotification = `-- name: DeleteNotification :exec
DELETE
  FROM notification
 WHERE id = $1
`

func (q *Queries) DeleteNotification(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteNotification, id)
	return err
}

const fetchNewNotifications = `-- name: FetchNewNotifications :many
SELECT id, user_id, task_id, message, notification_time, creation_time, destination, sended
  FROM notification
 WHERE notification_time < $1::timestamp
   AND sended = FALSE
`

func (q *Queries) FetchNewNotifications(ctx context.Context, till time.Time) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, fetchNewNotifications, till)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TaskID,
			&i.Message,
			&i.NotificationTime,
			&i.CreationTime,
			&i.Destination,
			&i.Sended,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFutureUserNotifications = `-- name: GetFutureUserNotifications :many
SELECT id, user_id, task_id, message, notification_time, creation_time, destination, sended
  FROM notification
 WHERE notification_time > $1::timestamp
   AND user_id = $2::integer
`

type GetFutureUserNotificationsParams struct {
	FromTime time.Time
	UserID   int32
}

func (q *Queries) GetFutureUserNotifications(ctx context.Context, arg GetFutureUserNotificationsParams) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getFutureUserNotifications, arg.FromTime, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TaskID,
			&i.Message,
			&i.NotificationTime,
			&i.CreationTime,
			&i.Destination,
			&i.Sended,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotification = `-- name: GetNotification :one
SELECT id, user_id, task_id, message, notification_time, creation_time, destination, sended
  FROM notification
 WHERE id = $1
`

func (q *Queries) GetNotification(ctx context.Context, id int32) (Notification, error) {
	row := q.db.QueryRowContext(ctx, getNotification, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TaskID,
		&i.Message,
		&i.NotificationTime,
		&i.CreationTime,
		&i.Destination,
		&i.Sended,
	)
	return i, err
}

const markSendedNotifications = `-- name: MarkSendedNotifications :exec
UPDATE notification 
   SET sended = TRUE
 WHERE notification_time < $1::timestamp
`

func (q *Queries) MarkSendedNotifications(ctx context.Context, till time.Time) error {
	_, err := q.db.ExecContext(ctx, markSendedNotifications, till)
	return err
}
